/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
#ifndef UNIQUE_RESOURCE_H_
#define UNIQUE_RESOURCE_H_
// workaround for GCC
#if defined(__GNUC__)
#ifdef UNIQUE_RESOURCE_ALLOW_DELETER_CALL_THROWING_EXCEPTION
#define UNIQUE_RESOURCE_NOEXCEPT
#else
#define UNIQUE_RESOURCE_NOEXCEPT noexcept
#endif
#define UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_RESET UNIQUE_RESOURCE_NOEXCEPT
#define UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_DELETER_CALL                    \
  UNIQUE_RESOURCE_NOEXCEPT
#else
#define UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_RESET                           \
  noexcept(noexcept(this->reset()))
#define UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_DELETER_CALL                    \
  noexcept(noexcept(this->get_deleter()(resource)))
#endif
namespace std_experimental {
template <typename R, typename D> class unique_resource {
  R resource;
  D deleter;
  bool execute_on_destruction; // exposition only
  unique_resource &operator=(unique_resource const &) = delete;
  unique_resource(unique_resource const &) = delete; // no copies!
public:
  // construction
  explicit unique_resource(R &&resource, D &&deleter,
                           bool shouldrun = true) noexcept
      : resource(std::move(resource)),
        deleter(std::move(deleter)),
        execute_on_destruction{shouldrun} {}
  // move
  unique_resource(unique_resource &&other) noexcept
      : resource(std::move(other.resource)),
        deleter(std::move(other.deleter)),
        execute_on_destruction{other.execute_on_destruction} {
    other.release();
  }
  unique_resource &operator=(unique_resource &&other)
      UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_RESET {
    this->reset();
    this->deleter = std::move(other.deleter);
    this->resource = std::move(other.resource);
    this->execute_on_destruction = other.execute_on_destruction;
    other.release();
    return *this;
  }
  // resource release
  ~unique_resource() UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_RESET {
    this->reset();
  }
  void reset() UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_DELETER_CALL {
    if (execute_on_destruction) {
      this->execute_on_destruction = false;
      this->get_deleter()(resource);
    }
  }
  void reset(R &&newresource) UNIQUE_RESOURCE_NOEXCEPT_NOEXCEPT_THIS_RESET {
    this->reset();
    this->resource = std::move(newresource);
    this->execute_on_destruction = true;
  }
  R const &release() noexcept {
    this->execute_on_destruction = false;
    return this->get();
  }
  // resource access
  R const &get() const noexcept { return this->resource; }
  operator R const &() const noexcept { return this->resource; }
  R operator->() const noexcept { return this->resource; }
  typename std::add_lvalue_reference<
      typename std::remove_pointer<R>::type>::type
  operator*() const {
    return *this->resource;
  }
  // deleter access
  const D &get_deleter() const noexcept { return this->deleter; }
};
// factories
template <typename R, typename D>
unique_resource<R, typename std::remove_reference<D>::type>
make_unique_resource(R &&r, D &&d) noexcept {
  return unique_resource<R, typename std::remove_reference<D>::type>(
      std::move(r), std::forward<typename std::remove_reference<D>::type>(d),
      true);
}
template <typename R, typename D>
unique_resource<R, D> make_unique_resource_checked(R r, R invalid,
                                                   D d) noexcept {
  bool shouldrun = not bool(r == invalid);
  return unique_resource<R, D>(std::move(r), std::move(d), shouldrun);
}
}
#endif /* UNIQUE_RESOURCE_H_ */
